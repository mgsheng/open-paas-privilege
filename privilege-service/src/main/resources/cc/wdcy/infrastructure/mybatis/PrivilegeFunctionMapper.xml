<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.com.open.opensass.privilege.infrastructure.mybatis.PrivilegeFunctionRepositoryMyBatis">
    <resultMap type="PrivilegeFunction" id="privilegeFunctionMap">
        <id column="id" property="id" jdbcType="VARCHAR"/>
        <result column="resource_id" property="resourceId" jdbcType="VARCHAR"/>
        <result column="operation_id" property="operationId" jdbcType="VARCHAR"/>
        <result column="opt_url" property="optUrl" jdbcType="VARCHAR"/>
        <result column="create_user" property="createUser" jdbcType="VARCHAR"/>
        <result column="create_userid" property="createUserId" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Insert_Column_List">
        id,
        resource_id,
        operation_id,
        opt_url,
        create_user,
        create_userid,
        create_time
    </sql>
    <select id="findByFunctionId" resultMap="privilegeFunctionMap" flushCache="true">
        SELECT * FROM  privilege_function
        where  id = #{functionId}
    </select>
    <select id="getFunctionListByUserId" resultType="java.util.HashMap" flushCache="true">
    	SELECT DISTINCT d.resource_id as resourceId,d.id as functionId,d.operation_id as optId,
    	d.opt_url as optUrl FROM privilege_user a,privilege_user_role b,privilege_role_resource c,
    	privilege_function d WHERE a.app_userid=#{appUserId}
         AND a.app_id=#{appId}
	AND a.uid=b.user_id AND b.privilege_roleid=c.privilege_roleid AND c.resource_id=d.resource_id;
    </select>
    <select id="getFunctionListByAppId" resultMap="privilegeFunctionMap" flushCache="true">
   		select b.* FROM privilege_resource a,privilege_function b WHERE
		a.app_id=#{appId} AND a.resource_id=b.resource_id
    </select>
    <select id="findFunctionPage" resultMap="privilegeFunctionMap" flushCache="true">
         select * from privilege_function
         where  function_code = #{functionCode}
         limit #{startRow},#{pageSize} 
	</select>
    <update id="updatePrivilegeFunction" parameterType="PrivilegeFunction" flushCache="true">
        update privilege_function set
        <if test="resourceId != null and resourceId !=''">
        resource_id = #{resourceId},
        </if>
         <if test="operationId != null and operationId !=''" >
        operation_id = #{operationId},
        </if>
        <if test="optUrl != null and optUrl !=''" >
        opt_url = #{optUrl},
        </if>
         <if test="createUser != null  and createUser !=''" >
        create_user = #{createUser},
        </if>
         <if test="createUserId != null  and createUserId !=''" >
        create_userid = #{createUserId},
        </if>
        create_time=#{createTime}
        where id = #{id}
    </update>
	<insert id="savePrivilegeFunction" parameterType="PrivilegeFunction" flushCache="true">
        insert into privilege_function
        (id,resource_id,operation_id,opt_url,create_time,create_user,create_userid)
        values
        (#{id},#{resourceId},#{operationId},#{optUrl},#{createTime},#{createUser},#{createUserId})
    </insert>
	 <delete id="deleteByFunctionId">
        delete from privilege_function where id=#{functionId}
    </delete>
    <select id="getFunctionByRId" resultMap="privilegeFunctionMap" flushCache="true">
         select * from privilege_function
         where  resource_id = #{resourceId}
	</select>
	  <select id="getFunctionMap" resultType="java.util.Map" flushCache="true">
         select resource_id as resourceId,id as functionId ,operation_id as optId,opt_url as optUrl from privilege_function
         where  resource_id = #{resourceId}
	</select>
	
  <delete id="deleteByFunctionIds">
        delete from privilege_function where id in
        <foreach item="item" index="index" collection="functionIds" open="(" separator="," close=")">  
          #{item}  
        </foreach>
    </delete>
</mapper>